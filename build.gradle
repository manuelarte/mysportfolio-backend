plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "nebula.facet" version "7.0.8"
    id 'com.google.cloud.tools.jib' version '2.1.0'
    id 'com.palantir.git-version' version '0.12.3'
    id 'checkstyle'
}

ext.versionFile = file('version.properties')
ext.gitDetails = versionDetails()

ProjectVersion readVersion() {
    logger.quiet 'Reading version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream -> versionProps.load(stream) }
    def release = Boolean.FALSE
    if (versionProps.release != null) {
        release = versionProps.release.toBoolean()
    } else {
        if (gitDetails.branchName == 'master') {
            release = Boolean.TRUE
        }
    }
    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(),
            versionProps.bugFix.toInteger(), release)
}

group = 'org.manuel'
version = readVersion()
sourceCompatibility = '13'

facets {
    integrationTest {
        parentSourceSet = 'main'
        testTaskName = 'integrationTest'
        includeInCheckLifecycle = true
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url "https://dl.bintray.com/manueldoncelmartos/query-parameter" }
}

// https://stackoverflow.com/questions/54598484/gradle-5-junit-bom-and-spring-boot-incorrect-versions
ext['junit-jupiter.version'] = '5.6.2'

dependencies {

    implementation 'javax.inject:javax.inject:1'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-gcp-starter-logging:1.2.0.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-oauth2-client'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'pl.jsolve:typeconverter:1.0.1'
    implementation 'org.aspectj:aspectjrt:1.9.5'
    implementation 'org.aspectj:aspectjweaver:1.9.5'

    implementation 'org.hibernate.validator:hibernate-validator:6.1.0.Final'
    implementation 'com.google.api-client:google-api-client:1.30.7'
    implementation 'com.google.api-client:google-api-client-jackson2:1.30.7'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'io.github.manuelarte.spring:query-parameter-model:0.0.1'
    implementation 'io.github.manuelarte.spring:query-parameter-mongo:0.0.1'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'com.google.firebase:firebase-admin:6.12.0'

    testImplementation 'org.json:json:20190722'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.2.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.1.13'
    testImplementation 'org.mutabilitydetector:MutabilityDetector:0.10.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

    integrationTestImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'junit', module: 'junit'
    }
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    integrationTestImplementation 'org.springframework.security:spring-security-test'
    integrationTestImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
    integrationTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

}

test {
    useJUnitPlatform()
}

integrationTest {
    useJUnitPlatform()
}

springBoot {
    buildInfo()
}

jib {
    container {
        creationTime = 'USE_CURRENT_TIMESTAMP'
    }
}

class ProjectVersion {
    Integer major
    Integer minor
    Integer bugFix
    Boolean release

    ProjectVersion(Integer major, Integer minor, Integer bugFix) {
        this(major, minor, bugFix, Boolean.FALSE)
    }

    ProjectVersion(Integer major, Integer minor, Integer bugFix, Boolean release) {
        this.major = major
        this.minor = minor
        this.bugFix = bugFix
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor.$bugFix${release ? '' :  '-SNAPSHOT'}"
    }
}
