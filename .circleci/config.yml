version: 2.1 # use CircleCI 2.1
orbs:
  gcp-cli: circleci/gcp-cli@1.8.3
  gcp-gke: circleci/gcp-gke@0.1.0
  gcr: circleci/gcp-gcr@0.6.1
jobs: # a collection of steps
  build:
    # Remove if parallelism is not desired
    parallelism: 2
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    docker: # run the steps with Docker
      - image: circleci/openjdk:11.0.4-jdk-stretch # ...with this image as the primary container; this is where all `steps` will run
    steps: # a collection of executable commands
      - checkout # check out source code to working directory
      # Read about caching dependencies: https://circleci.com/docs/2.1/caching/
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Run tests in parallel # See: https://circleci.com/docs/2.0/parallelism-faster-jobs/
          # Use "./gradlew test" instead if tests are not run in parallel
          command: |
            cd src/test/java
            # Get list of classnames of tests that should run on this node
            CLASSNAMES=$(circleci tests glob "**/*.java" \
              | cut -c 1- | sed 's@/@.@g' \
              | sed 's/.\{5\}$//' \
              | circleci tests split --split-by=timings --timings-type=classname)
            cd ../../..
            # Format the arguments to "./gradlew test"
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
            ./gradlew test $GRADLE_ARGS
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - store_test_results:
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: build/test-results/test
      - store_artifacts: # Upload test results for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: build/test-results/test
          when: always
      - run:
          name: Assemble JAR
          command: |
            # Skip this for other nodes
            if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
              ./gradlew assemble
            fi
      # As the JAR was only assembled in the first build container, build/libs will be empty in all the other build containers.
      - store_artifacts:
          path: build/libs
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
  Build-Push-Image-Docker:
    description: Build and push image to Google Container Registry
    docker: # run the steps with Docker
      - image: circleci/openjdk:11.0.4-jdk-stretch
    steps:
      - checkout
      - gcr/gcr-auth
      - run:
          name: Set project version environment variable and upload docker image
          command: |
            # export DOCKER_TAG=`date +%s`
            # echo DOCKER_TAG=$DOCKER_TAG >> $BASH_ENV
            export DOCKER_TAG=`./gradlew properties --no-daemon --console=plain -q | grep "^version:" | awk '{printf $2}'`
            echo DOCKER_TAG=$DOCKER_TAG >> $BASH_ENV
            source $BASH_ENV
            ./gradlew jib -Djib.to.image=gcr.io/$GOOGLE_PROJECT_ID/mysportfolio:$DOCKER_TAG
workflows:
  version: 2.1
  workflow:
    jobs:
      - build:
          context: MySportfolioDEV
      - Build-Push-Image-Docker:
          context: MySportfolio
          requires:
            - build
          filters:
            branches:
              only:
                - master